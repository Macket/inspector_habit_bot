from telebot import types
from bot import bot
from users.models import User
from datetime import datetime
from tzwhere import tzwhere
import re
import pytz
import users.markups as markups
from users.utils import get_schedule, get_user_naming
from checks.models import Check
from habits.models import Habit
from users.data import preparing_habits
from checks.utils import CheckStatus


@bot.message_handler(func=lambda message: not message.text.startswith('/start judge'), commands=['start'])
def register(message):
    referrer = int(message.text[7:]) if message.text[7:] else None
    if referrer == message.chat.id:
        referrer = None
    user = User(message.chat.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                language_code=message.from_user.language_code,
                timezone='UTC',
                referrer=referrer,
                )
    user.save()

    if user.language_code:
        greeting_and_habit_request(message)
    else:
        language_request(message)


@bot.message_handler(func=lambda message:
message.text in ['üóù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', 'üóù Sign up'], content_types=['text'])
def greeting_and_habit_request(message):
    user = User.get(message.chat.id)
    ru_text = f'–ü—Ä–∏–≤–µ—Ç{", " + user.first_name if user.first_name else ""}! ' \
              f'–Ø –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –•—ç–±–∏—Ç, –±–æ—Ä–µ—Ü —Å –º–∏—Ä–æ–≤–æ–π –ª–µ–Ω—å—é –∏ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–µ–π. ' \
              f'–ê —Ç—ã, –∫–∞–∂–µ—Ç—Å—è, –∫–∞–∫ —Ä–∞–∑ –∏—Å–ø—ã—Ç–≤–∞–µ—à—å —Å —ç—Ç–∏–º –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.\n\n' \
              f'–ö–æ—Ä–æ—á–µ, –Ω–∞–∑–Ω–∞—á–∞–µ—à—å —Å–µ–±–µ –ø—Ä–∏–≤—ã—á–∫—É –∏ –æ–±–µ—â–∞–µ—à—å —Å–ª–µ–¥–æ–≤–∞—Ç—å –µ–π, ' \
              f'–∞ —è —Ç–µ–±—è –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å: –¥–µ—Ä–∂–∏—à—å —Å–ª–æ–≤–æ ‚Äî –∫—Ä–∞—Å–∞–≤—á–∏–∫, ' \
              f'–Ω–∞—Ä—É—à–∞–µ—à—å ‚Äî –ª–æ–≤–∏—à—å –¥–µ–Ω–µ–∂–Ω—ã–π —à—Ç—Ä–∞—Ñ. –†–∞–∑–º–µ—Ä —à—Ç—Ä–∞—Ñ–∞ –≤—ã–±–∏—Ä–∞–µ—à—å —Å–∞–º. ' \
              f'–ò —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –º—ã —Ä–∞–±–æ—Ç–∞–µ–º 3 –Ω–µ–¥–µ–ª–∏.\n\n' \
              f'–í—Å—ë —è—Å–Ω–æ? –ï—Å–ª–∏ –¥–∞, —Ç–æ –≤—ã–±–∏—Ä–∞–π –ø—Ä–∏–≤—ã—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –ø–∏—à–∏ —Å–≤–æ—é, ' \
              f'–µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –Ω–µ —Ç—Ä–∞—Ç—å –º–æ—ë –≤—Ä–µ–º—è.\n\n' \
              f'–ò –∫—Å—Ç–∞—Ç–∏, —è —Ñ–∏–ª–∞–Ω—Ç—Ä–æ–ø: 80% –¥–µ–Ω–µ–≥, ' \
              f'—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ —Ç–≤–æ–µ–π –ª–µ–Ω–∏, –ø–æ–π–¥—É—Ç –Ω–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.'

    en_text = f'Hello{", " + user.first_name if user.first_name else ""}! ' \
              f'I am Inspector Habit, the fighter with world laziness and procrastination. ' \
              f'And you seem to have trouble with it.\n\n' \
              f'In short, you assign yourself a habit and promise to follow it, ' \
              f'and I will check you: keep your word - handsome, ' \
              f'you break - you catch a fine. You choose the amount of fines yourself. ' \
              f'And so we work 3 weeks.\n\n' \
              f'All clear? If yes, then choose a habit from the list or write your own, ' \
              f"if not, don't waste my time.\n\n" \
              f"And by the way, I'm a philanthropist: 80% of the money " \
              f"generated on your laziness will go to charity."

    text = ru_text if user.language_code == 'ru' else en_text

    bot.send_message(message.chat.id, text, reply_markup=markups.get_habits_markup(message.chat.id))
    bot.register_next_step_handler(message, habit_receive)


def habit_receive(message):
    user = User.get(message.chat.id)

    if message.text in ['–î—Ä—É–≥–æ–µ...', 'Other...']:
        ru_text = '–ù–∞–ø–∏—à–∏ –ø—Ä–∏–≤—ã—á–∫—É, –Ω–∞–¥ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å'
        en_text = 'Write the habit we will work on'
        text = ru_text if user.language_code == 'ru' else en_text

        bot.send_message(message.chat.id,
                         text,
                         reply_markup=types.ReplyKeyboardRemove(),
                         parse_mode='Markdown')
        bot.register_next_step_handler(message, habit_receive)
    else:
        ru_text = f'–ò—Ç–∞–∫, —Ç—ã  —Ö–æ—á–µ—à—å *{message.text}*'
        en_text = f'So you want *{message.text}*'
        text = ru_text if user.language_code == 'ru' else en_text

        preparing_habits[message.chat.id] = {'label': message.text, 'days_of_week': []}

        bot.send_message(message.chat.id,
                         text,
                         reply_markup=markups.get_ready_markup(message.chat.id),
                         parse_mode='Markdown')
        days_request(message)


def language_request(message):
    bot.send_message(message.chat.id,
                     'üá∑üá∫ –í—ã–±–µ—Ä–∏ —è–∑—ã–∫\nüá¨üáß Choose the language',
                     reply_markup=markups.get_languages_markup())
    bot.register_next_step_handler(message, language_response)


def language_response(message):
    user = User.get(message.chat.id)

    if message.text in ('üá∑üá∫–†—É—Å—Å–∫–∏–π', 'üá¨üáßEnglish'):
        # set user language
        user.language_code = 'ru' if message.text == 'üá∑üá∫–†—É—Å—Å–∫–∏–π' else 'en'
        user.save()
        language_confirm_request(message)
    else:
        bot.register_next_step_handler(message, language_response)


def language_confirm_request(message):
    text = f'üá∑üá∫ –¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å *{message.text}*\n' \
           f'üá¨üáß Are you sure you want to choose *{message.text}*'
    bot.send_message(message.chat.id,
                     text,
                     reply_markup=markups.get_language_confirm_markup(),
                     parse_mode='Markdown')
    bot.register_next_step_handler(message, language_confirm_receive)


def language_confirm_receive(message):
    if message.text == 'üá∑üá∫–î–∞ / üá¨üáßYes':
        greeting_and_habit_request(message)
    else:
        language_request(message)


def days_request(message):
    user = User.get(message.chat.id)

    ru_text = '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –∫–æ–≥–¥–∞ —è –±—É–¥—É –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫ —Ç–µ–±–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π.'
    en_text = "Now choose the days of the week when I will come to you with a check"
    text = ru_text if user.language_code == 'ru' else en_text

    bot.send_message(message.chat.id,
                     text,
                     reply_markup=markups.get_days_inline_markup(message.chat.id))
    bot.register_next_step_handler(message, time_request)


@bot.callback_query_handler(func=lambda call: call.data.startswith('@@DAYS_REQUEST_INTRO'))
def handle_days_query(call):
    if call.data == '@@DAYS_REQUEST_INTRO/all':
        preparing_habits[call.message.chat.id]['days_of_week'] = [0, 1, 2, 3, 4, 5, 6]
    else:
        selected_day = int(call.data.split('/')[1])
        if selected_day in preparing_habits[call.message.chat.id]['days_of_week']:
            preparing_habits[call.message.chat.id]['days_of_week'].remove(selected_day)
        else:
            preparing_habits[call.message.chat.id]['days_of_week'].append(selected_day)
            preparing_habits[call.message.chat.id]['days_of_week'].sort()
    bot.edit_message_text(chat_id=call.message.chat.id,
                          text=call.message.text,
                          message_id=call.message.message_id,
                          reply_markup=markups.get_days_inline_markup(call.message.chat.id),
                          parse_mode='HTML')


def time_request(message):
    user = User.get(message.chat.id)

    ru_text = f'–û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, *19:30*. ' \
              f'–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä, *7:30 19:30*'
    en_text = 'Good, choose a check time, for example, *19:30*. ' \
              'You can select multiple checks via space, for example, *7:30 19:30*'
    text = ru_text if user.language_code == 'ru' else en_text

    bot.send_message(message.chat.id,
                     text,
                     parse_mode='Markdown',
                     reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, time_receive)


def time_receive(message):
    user = User.get(message.chat.id)
    ru_days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    en_days = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su']
    days = ru_days if user.language_code == 'ru' else en_days

    time_array = message.text.split(' ')

    try:
        for time in time_array:
            timeformat = '%H:%M'
            datetime.strptime(time, timeformat)

        preparing_habits[message.chat.id]['time_array'] = time_array
        check_days = re.sub(r'\s+', ' ', ' '.join(
            [day if day_of_week in preparing_habits[message.chat.id]['days_of_week'] else '' for day_of_week, day in enumerate(days)]))

        ru_text = f'–•–æ—Ä–æ—à–æ, —è –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–µ–±—è –≤ *{message.text}* –ø–æ *{check_days}*.'
        en_text = f"Okay, I'll check you at *{message.text}* on *{check_days}*"
        text = ru_text if user.language_code == 'ru' else en_text

        bot.send_message(message.chat.id,
                         text,
                         parse_mode="Markdown")
        location_request(message)

    except ValueError:
        ru_text = '–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤—ë–ª –∫–∞–∫—É—é-—Ç–æ –µ—Ä—É–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º–∞—Ç *–ß–ß:–ú–ú*.'
        en_text = 'It seems you have entered some nonsense. Try again using *HH:MM* format.'
        text = ru_text if user.language_code == 'ru' else en_text

        bot.send_message(message.chat.id, text, parse_mode='Markdown')
        bot.register_next_step_handler(message, time_receive)


def location_request(message):
    user = User.get(message.chat.id)

    ru_text = '–¢–∞–∫–∂–µ –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Ç–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, —á—Ç–æ–±—ã –ø—Ä–æ–≤–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–≤—Ä–µ–º—è.\n\n' \
              '–ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º.'
    en_text = 'I also need to find out what timezone you live in order to perform the checks on time.\n\n' \
              "You can specify timezone manually or just share location."
    text = ru_text if user.language_code == 'ru' else en_text

    bot.send_message(message.chat.id, text, reply_markup=markups.get_location_markup(message.chat.id))
    bot.register_next_step_handler(message, location_receive)


def location_receive(message):
    if message.location:
        tzw = tzwhere.tzwhere()
        timezone_str = tzw.tzNameAt(message.location.latitude, message.location.longitude)
        user = User.get(message.chat.id)
        user.timezone = timezone_str
        user.save()
        fine_request(message)
    elif message.text == '–£–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é':
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å', reply_markup=markups.get_timezone_markup())
        bot.register_next_step_handler(message, timezone_receive)
    elif message.text == 'Specify manually':
        bot.send_message(message.chat.id, 'Choose your timezone', reply_markup=markups.get_timezone_markup())
        bot.register_next_step_handler(message, timezone_receive)
    else:
        bot.register_next_step_handler(message, location_receive)


def timezone_receive(message):
    user = User.get(message.chat.id)

    tz = 'Etc/' + message.text
    tz = tz.replace('-', '+') if '-' in tz else tz.replace('+', '-')
    if tz in pytz.all_timezones:
        user.timezone = tz
        user.save()
        fine_request(message)
    else:
        ru_text = '–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ'
        en_text = 'You sent something wrong'
        text = ru_text if user.language_code == 'ru' else en_text

        bot.send_message(message.chat.id, text)
        bot.register_next_step_handler(message, timezone_receive)


def fine_request(message):
    user = User.get(message.chat.id)

    ru_text = '–í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä —à—Ç—Ä–∞—Ñ–∞. –¢–æ–ª—å–∫–æ —Å–º–æ—Ç—Ä–∏ –Ω–µ –ø–µ—Ä–µ–±–æ—Ä—â–∏, ' \
              '–ø–æ—Ç–æ–º—É —á—Ç–æ –ø–ª–∞—Ç–∏—Ç—å –ø—Ä–∏–¥—ë—Ç—Å—è –≤—Å—è–∫–∏–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –Ω–∞—Ä—É—à–∏—à—å –æ–±–µ—â–∞–Ω–∏–µ.'
    en_text = 'Choose a fine. Just do not overdo, ' \
              'because you have to pay every time you break a promise.'
    text = ru_text if user.language_code == 'ru' else en_text

    bot.send_message(message.chat.id, text, reply_markup=markups.get_fines_markup())
    bot.register_next_step_handler(message, fine_receive)


def fine_receive(message):
    try:
        preparing_habits[message.chat.id]['fine'] = int(message.text.split('üí≤')[1])
        money_intention_request(message)
    except (ValueError, IndexError):
        user = User.get(message.chat.id)
        ru_text = '–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ'
        en_text = 'You sent something wrong'
        text = ru_text if user.language_code == 'ru' else en_text

        bot.send_message(message.chat.id, text)
        bot.register_next_step_handler(message, fine_receive)


def money_intention_request(message):
    user = User.get(message.chat.id)

    ru_text = '–í—ã–±–µ—Ä–∏, –∫—É–¥–∞ –ø–æ–π–¥—É—Ç —Ç–≤–æ–∏ –¥–µ–Ω—å–≥–∏: *–¥—Ä—É–≥—É* –∏–ª–∏ *–Ω–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å*.\n\n' \
              '–ï—Å–ª–∏ –≤—ã–±–µ—Ä–µ—à—å *–¥—Ä—É–≥—É*, —Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞ ' \
              '–≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—É–¥—å–∏ –Ω–∞ —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–µ. ' \
              '–û–Ω –±—É–¥–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∏ –ø–∏–Ω–∞—Ç—å —Ç–µ–±—è —Å –º–æ–µ–π –ø–æ–º–æ—â—å—é. ' \
              '–ï–º—É –∂–µ —Ç—ã –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—à—å –∑–∞–ø–ª–∞—Ç–∏—Ç—å —à—Ç—Ä–∞—Ñ –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–≤–∞–ª–∞.\n\n' \
              '–ï—Å–ª–∏ –≤—ã–±–µ—Ä–µ—â—å *–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å*, —Ç–æ —à—Ç—Ä–∞—Ñ—ã –±—É–¥–µ—à—å –ø–ª–∞—Ç–∏—Ç—å –º–Ω–µ. ' \
              '–ê —è 80% –¥–µ–Ω–µ–≥ –ø–æ–∂–µ—Ä—Ç–≤—É—é –¥–µ—Ç–∏—à–∫–∞–º –Ω–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç: https://giveinternet.org'
    en_text = "Choose where your money will go: *to a friend* or *to charity*.\n\n" \
              "If you choose *friend* you will need to assign your friend " \
              "as the judge on this habit. " \
              "He will monitor execution and kick you with my help. " \
              "And you will have to pay a fine to him in case of failure. \n\n" \
              "If you choose *charity*, then you will pay fines to me. " \
              "And I will donate 80% of the money to the kids on the Internet: https://giveinternet.org"
    text = ru_text if user.language_code == 'ru' else en_text

    bot.send_message(message.chat.id,
                     text,
                     reply_markup=markups.get_money_intention_markup(message.chat.id),
                     parse_mode='Markdown')
    bot.register_next_step_handler(message, money_intention_receive)


def money_intention_receive(message):
    if message.text in ['–î—Ä—É–≥—É', 'To a friend']:
        preparing_habits[message.chat.id]['with_judge'] = True
    else:
        preparing_habits[message.chat.id]['with_judge'] = False

    promise_request(message)


def promise_request(message):
    user = User.get(message.chat.id)

    ru_text = f'–í—Ä–µ–º—è –¥–∞—Ç—å –æ–±–µ—â–∞–Ω–∏–µ:\n\n' \
              f'"–Ø –æ–±–µ—â–∞—é *{preparing_habits[message.chat.id]["label"]}* –∏ –∑–∞–ø–ª–∞—á—É —à—Ç—Ä–∞—Ñ' \
              f'*üí≤{preparing_habits[message.chat.id]["fine"]}* –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –æ–±–µ—â–∞–Ω–∏—è."'
    en_text = f"It's time to commit:\n\n" \
              f'"I promise *{preparing_habits[message.chat.id]["label"]}*.' \
              f'I will pay a *üí≤{preparing_habits[message.chat.id]["fine"]}* fine for breaking my promise."'
    text = ru_text if user.language_code == 'ru' else en_text

    bot.send_message(message.chat.id, text, reply_markup=markups.get_promise_markup(message.chat.id), parse_mode='Markdown')
    bot.register_next_step_handler(message, promise_receive)


def promise_receive(message):
    user = User.get(message.chat.id)

    # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É
    habit = Habit(message.chat.id,
                  preparing_habits[message.chat.id]['label'],
                  preparing_habits[message.chat.id]['days_of_week'],
                  preparing_habits[message.chat.id]['time_array'],
                  preparing_habits[message.chat.id]['fine']).save()

    # –°–Ω–∏–º–∞–µ–º —à—Ç—Ä–∞—Ñ—ã —Å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
    if user.referrer:
        referrer = User.get(user.referrer)
        referrer.satisfy_fines(CheckStatus.WORKED.name)

        ru_text_ref = f'{get_user_naming(user, "–¢–≤–æ–π –¥—Ä—É–≥")} ' \
                      f'–Ω–∞–∑–Ω–∞—á–∏–ª —Å–≤–æ—é –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É. ' \
                      f'–ó–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã ' \
                      f'—Å —Ç–µ–±—è —Å–Ω–∏–º–∞—é—Ç—Å—è –≤—Å–µ –æ–±–≤–∏–Ω–µ–Ω–∏—è –∏ —Ç–≤–æ–∏ —à—Ç—Ä–∞—Ñ—ã –∞–Ω–Ω—É–ª–∏—Ä—É—é—Ç—Å—è.'
        en_text_ref = f'{get_user_naming(user, "Your friend")} ' \
                      f'has assigned his first habit. ' \
                      f'For successful social work all charges ' \
                      f'against you and your fines are canceled.'
        text_ref = ru_text_ref if referrer.language_code == 'ru' else en_text_ref

        bot.send_message(referrer.id, text_ref)

    if preparing_habits[message.chat.id]['with_judge']:
        ru_text = '–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å—É–¥—å—é. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –¥—Ä—É–≥—É —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µüëá'
        en_text = 'It remains to assign the judge. Just send the message below to a friendüëá'
        text = ru_text if user.language_code == 'ru' else en_text

        bot.send_message(message.chat.id, text, reply_markup=types.ReplyKeyboardRemove())

        ru_days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        en_days = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su']
        days = ru_days if user.language_code == 'ru' else en_days

        check_days = re.sub(r'\s+', ' ', ' '.join(
            [day if day_of_week in preparing_habits[message.chat.id]['days_of_week'] else '' for day_of_week, day in
             enumerate(days)]))
        check_time = ' '.join(preparing_habits[message.chat.id]['time_array'])

        ru_text = f'{get_user_naming(user, "–¢–≤–æ–π –¥—Ä—É–≥")} —Ö–æ—á–µ—Ç, ' \
                  f'—á—Ç–æ–±—ã —Ç—ã —Å—Ç–∞–ª –µ–≥–æ —Å—É–¥—å—ë–π –Ω–∞ –ø—Ä–∏–≤—ã—á–∫–µ *{habit.label}*.\n\n' \
                  f'–î–Ω–∏ –Ω–µ–¥–µ–ª–∏: *{check_days}*\n' \
                  f'–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: *{check_time}*\n' \
                  f'–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: *3 –Ω–µ–¥–µ–ª–∏*\n\n' \
                  f'–ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–æ–≤–∞–ª {get_user_naming(user, "—Ç–≤–æ–π –¥—Ä—É–≥")} –æ–±—è–∑—É–µ—Ç—Å—è –∑–∞–ø–ª–∞—Ç–∏—Ç—å —Ç–µ–±–µ *${habit.fine}*'
        en_text = f'{get_user_naming(user, "Your friend")} wants you' \
                  f'to be the jadge on the habit *{habit.label}*.\n\n' \
                  f'Days of week: *{check_days}*\n' \
                  f'Checks time: *{check_time}*\n' \
                  f'Duration: *3 weeks*\n\n' \
                  f'For each fail {get_user_naming(user, "your friend")} agrees to pay you *${habit.fine}*'
        text = ru_text if user.language_code == 'ru' else en_text

        bot.send_message(message.chat.id,
                         text,
                         reply_markup=markups.get_judge_markup(user.id, habit.id),
                         parse_mode='Markdown')
    else:
        schedule_native, schedule_utc = get_schedule(
            preparing_habits[message.chat.id]['days_of_week'],
            preparing_habits[message.chat.id]['time_array'],
            User.get(message.chat.id).timezone,
        )

        for check_native, check_utc in zip(schedule_native, schedule_utc):  # –Ω—É–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å
            Check(habit.id, check_native, check_utc).save()
        del preparing_habits[message.chat.id]

        ru_text = '–ù—É —á—Ç–æ –∂, –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫–æ–π —Ç—ã –∫—Ä—É—Ç–æ–π. –£–¥–∞—á–∏!'
        en_text = "Well, let's see how cool you are. Good luck!"
        text = ru_text if user.language_code == 'ru' else en_text

        bot.send_message(message.chat.id, text, reply_markup=markups.get_main_menu_markup(message.chat.id))
        bot.send_sticker(message.chat.id, 'CAADAgADWQIAAsY4fgsQX6OJTX_IOgI')
