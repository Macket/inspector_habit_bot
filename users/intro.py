from telebot import types
from bot import bot
from users.models import User
from datetime import datetime
from tzwhere import tzwhere
import re
import users.markups as markups
from users.utils import get_schedule
from checks.models import Check
from habits.models import Habit
from users.data import preparing_habits


@bot.message_handler(commands=['start'])
def register(message):
    referrer = message.text[7:] if message.text[7:] else None
    user = User(message.chat.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                language_code=message.from_user.language_code,
                referrer=referrer,
                )
    user.save()

    if user.language_code:
        greeting_and_habit_request(message)
    else:
        language_request(message)


def greeting_and_habit_request(message):
    user = User.get(message.chat.id)
    ru_text = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ{", " + user.first_name if user.first_name else ""}! ' \
              f'–Ø –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –•—ç–±–∏—Ç, –±–æ—Ä–µ—Ü —Å –º–∏—Ä–æ–≤–æ–π –ª–µ–Ω—å—é –∏ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–µ–π. ' \
              f'–ü–æ–¥ –º–æ–∏–º —á—É—Ç–∫–∏–º –Ω–∞–¥–∑–æ—Ä–æ–º –ª—é–¥–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—é—Ç –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –∏–∑–±–∞–≤–ª—è—é—Ç—Å—è –æ—Ç –≤—Ä–µ–¥–Ω—ã—Ö.' \
              f'\n\n–í—Å—ë –¥–µ–ª–æ –≤ —Ç–æ–º, —á—Ç–æ —è –∑–Ω–∞—é —Å–∞–º—ã–π –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±! ' \
              f'–î–∞–≤–∞–π—Ç–µ —è –ø–æ–∫–∞–∂—É –≤–∞–º. –£–≤–µ—Ä–µ–Ω, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∞—è-–Ω–∏–±—É–¥—å –≤—Ä–µ–¥–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π –Ω–∏–∫–∞–∫ ' \
              f'–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑–±–∞–≤–∏—Ç—å—Å—è. –ò–ª–∏ –∂–µ –Ω–∞–æ–±–æ—Ä–æ—Ç, –≤—ã –¥–∞–≤–Ω—ã–º-–¥–∞–≤–Ω–æ –º–µ—á—Ç–∞–µ—Ç–µ ' \
              f'–≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –ø–æ–ª–µ–∑–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É? –ù–∞–ø–∏—à–∏—Ç–µ, —á–µ–≥–æ –±—ã –≤–∞–º —Ö–æ—Ç–µ–ª–æ—Å—å, ' \
              f'–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.'

    en_text = f'Hello{", " + user.first_name if user.first_name else ""}! ' \
              f'I am Inspector Habit, fighter with world laziness and procrastination. ' \
              f'Under my strict control, people develop good habits and break bad habits.\n\n' \
              f'The thing is, I know the most powerful way! ' \
              f'Let me show you. I am sure that you have any bad habit you want to break.' \
              f'Or, on the contrary, did you long ago want to develop some good habit? ' \
              f'Write what you would like, or select from the list.'

    text = ru_text if user.language_code == 'ru' else en_text

    bot.send_message(message.chat.id, text, reply_markup=markups.get_habits_markup(message.chat.id))
    bot.register_next_step_handler(message, habit_response)


def habit_response(message):
    user = User.get(message.chat.id)

    ru_text = f'–ò—Ç–∞–∫, –≤—ã —Ö–æ—Ç–∏—Ç–µ *{message.text}*'
    en_text = f'So you want *{message.text}*'
    text = ru_text if user.language_code == 'ru' else en_text

    preparing_habits[message.chat.id] = {'label': message.text, 'days_of_week': []}

    bot.send_message(message.chat.id, text, reply_markup=markups.get_ready_markup(message.chat.id), parse_mode='Markdown')
    days_request(message)


def language_request(message):
    bot.send_message(message.chat.id,
                     'üá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞\nüá¨üáß Choose the language please',
                     reply_markup=markups.get_languages_markup())
    bot.register_next_step_handler(message, language_response)


def language_response(message):
    user = User.get(message.chat.id)

    if message.text in ('üá∑üá∫–†—É—Å—Å–∫–∏–π', 'üá¨üáßEnglish'):
        # set user language
        user.language_code = 'ru' if message.text == 'üá∑üá∫–†—É—Å—Å–∫–∏–π' else 'en'
        user.save()
        greeting_and_habit_request(message)
    else:
        bot.register_next_step_handler(message, language_response)


def days_request(message):
    user = User.get(message.chat.id)

    ru_text = '–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –∫–æ–≥–¥–∞ —è –±—É–¥—É –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫ –≤–∞–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π.'
    en_text = "Now let's choose the days of the week when I will come to you with a check"
    text = ru_text if user.language_code == 'ru' else en_text

    bot.send_message(message.chat.id,
                     text,
                     reply_markup=markups.get_days_inline_markup(message.chat.id))
    bot.register_next_step_handler(message, time_request)


@bot.callback_query_handler(func=lambda call: call.data.startswith('@@DAYS_REQUEST_INTRO'))
def handle_days_query(call):
    if call.data == '@@DAYS_REQUEST_INTRO/all':
        preparing_habits[call.message.chat.id]['days_of_week'] = [0, 1, 2, 3, 4, 5, 6]
    else:
        selected_day = int(call.data.split('/')[1])
        if selected_day in preparing_habits[call.message.chat.id]['days_of_week']:
            preparing_habits[call.message.chat.id]['days_of_week'].remove(selected_day)
        else:
            preparing_habits[call.message.chat.id]['days_of_week'].append(selected_day)
            preparing_habits[call.message.chat.id]['days_of_week'].sort()
    bot.edit_message_text(chat_id=call.message.chat.id,
                          text=call.message.text,
                          message_id=call.message.message_id,
                          reply_markup=markups.get_days_inline_markup(call.message.chat.id),
                          parse_mode='HTML')


def time_request(message):
    user = User.get(message.chat.id)

    ru_text = f'–û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, *19:30*. ' \
              f'–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä, *7:30 19:30*'
    en_text = 'Good, choose a check time, for example, *19:30*. ' \
              'You can select multiple checks via space, for example, *7:30 19:30*'
    text = ru_text if user.language_code == 'ru' else en_text

    bot.send_message(message.chat.id,
                     text,
                     parse_mode='Markdown',
                     reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, time_receive)


def time_receive(message):
    user = User.get(message.chat.id)
    ru_days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    en_days = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su']
    days = ru_days if user.language_code == 'ru' else en_days

    time_array = message.text.split(' ')

    try:
        for time in time_array:
            timeformat = '%H:%M'
            datetime.strptime(time, timeformat)

        preparing_habits[message.chat.id]['time_array'] = time_array
        check_days = re.sub(r'\s+', ' ', ' '.join(
            [day if day_of_week in preparing_habits[message.chat.id]['days_of_week'] else '' for day_of_week, day in enumerate(days)]))

        ru_text = f'–•–æ—Ä–æ—à–æ, –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤–∞—Å –≤ *{message.text}* –ø–æ *{check_days}*.'
        en_text = f"Okay, I'll check you at *{message.text}* on *{check_days}*"
        text = ru_text if user.language_code == 'ru' else en_text

        bot.send_message(message.chat.id,
                         text,
                         parse_mode="Markdown")
        location_request(message)

    except ValueError:
        ru_text = '–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º–∞—Ç *–ß–ß:–ú–ú*.'
        en_text = 'It seems you have entered something wrong. Try again using *HH:MM* format.'
        text = ru_text if user.language_code == 'ru' else en_text

        bot.send_message(message.chat.id, text, parse_mode='Markdown')
        bot.register_next_step_handler(message, time_receive)


def location_request(message):
    user = User.get(message.chat.id)

    ru_text = '–¢–∞–∫–∂–µ –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π —É –≤–∞—Å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, —á—Ç–æ–±—ã –ø—Ä–æ–≤–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–≤—Ä–µ–º—è.'
    en_text = 'I also need to find out what time zone you live in order to perform the checks on time.'
    text = ru_text if user.language_code == 'ru' else en_text

    bot.send_message(message.chat.id, text, reply_markup=markups.get_location_markup(message.chat.id))
    bot.register_next_step_handler(message, location_receive)


def location_receive(message):
    if message.location:
        tzw = tzwhere.tzwhere()
        timezone_str = tzw.tzNameAt(message.location.latitude, message.location.longitude)
        user = User.get(message.chat.id)
        user.timezone = timezone_str
        user.save()
        fine_request(message)
    else:
        bot.register_next_step_handler(message, location_receive)


def fine_request(message):
    user = User.get(message.chat.id)

    ru_text = f'–ò –Ω–∞–∫–æ–Ω–µ—Ü, —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ. –ü–æ–º–Ω–∏—Ç–µ, —è —Å–∫–∞–∑–∞–ª, —á—Ç–æ –∑–Ω–∞—é —Å–∞–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±? ' \
              f'–û–Ω –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ –≤—ã –¥–∞—ë—Ç–µ –æ–±–µ—â–∞–Ω–∏–µ "{preparing_habits[message.chat.id]["label"]}" ' \
              f'–∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–µ–Ω–µ–∂–Ω—ã–π —à—Ç—Ä–∞—Ñ, –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –Ω–∞—Ä—É—à–∞–µ—Ç–µ –µ–≥–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –Ω–µ–¥–µ–ª—å. ' \
              f'–ë–ª–∞–≥–æ–¥–∞—Ä—è —Ç–∞–∫–æ–º—É –ø–æ–¥—Ö–æ–¥—É –ª—é–¥–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç —Å–≤–æ–∏ –æ–±–µ—â–∞–Ω–∏—è –≤ 3 —Ä–∞–∑–∞ —á–∞—â–µ!\n\n' \
              f'–ö–∞–∫–æ–π —à—Ç—Ä–∞—Ñ –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –æ–±–µ—â–∞–Ω–∏—è?'
    en_text = f'And finally, the most important thing. Remember, I said that I know the most effective way? ' \
              f'It lies in the fact that you make a promise "{preparing_habits[message.chat.id]["label"]}" ' \
              f'and get a monetary fine every time you break it over the next 3 weeks. ' \
              f'Thanks to this approach, people fulfill their promises 3 times more often!\n\n' \
              f'What fine are you willing to pay for breaking your promise?'
    text = ru_text if user.language_code == 'ru' else en_text

    bot.send_message(message.chat.id, text, reply_markup=markups.get_fines_markup())
    bot.register_next_step_handler(message, fine_receive)


def fine_receive(message):
    try:
        preparing_habits[message.chat.id]['fine'] = int(message.text.split('üí≤')[1])
        promise_request(message)
    except (ValueError, IndexError):
        bot.send_message(message.chat.id, '–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ')
        bot.register_next_step_handler(message, fine_receive)


def promise_request(message):
    user = User.get(message.chat.id)

    ru_text = f'–í—Ä–µ–º—è –¥–∞—Ç—å –æ–±–µ—â–∞–Ω–∏–µ:\n\n' \
              f'"–Ø –æ–±–µ—â–∞—é *{preparing_habits[message.chat.id]["label"]}* –∏ –∑–∞–ø–ª–∞—á—É —à—Ç—Ä–∞—Ñ' \
              f'*üí≤{preparing_habits[message.chat.id]["fine"]}* –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –æ–±–µ—â–∞–Ω–∏—è."'
    en_text = f"It's time to commit:\n\n" \
              f'"I promise *{preparing_habits[message.chat.id]["label"]}*.' \
              f'I will pay a *{preparing_habits[message.chat.id]["fine"]}* fine for breaking my promise."'
    text = ru_text if user.language_code == 'ru' else en_text

    bot.send_message(message.chat.id, text, reply_markup=markups.get_promise_markup(message.chat.id), parse_mode='Markdown')
    bot.register_next_step_handler(message, promise_receive)


def promise_receive(message):
    user = User.get(message.chat.id)

    ru_text = '–í—ã —Å–º–µ–ª—ã–π —á–µ–ª–æ–≤–µ–∫. –£–¥–∞—á–∏!'
    en_text = 'You are a brave man. Good luck!'
    text = ru_text if user.language_code == 'ru' else en_text

    print(preparing_habits)
    schedule_native, schedule_utc = get_schedule(
        preparing_habits[message.chat.id]['days_of_week'],
        preparing_habits[message.chat.id]['time_array'],
        User.get(message.chat.id).timezone,
    )
    habit = Habit(message.chat.id,
                  preparing_habits[message.chat.id]['label'],
                  preparing_habits[message.chat.id]['days_of_week'],
                  preparing_habits[message.chat.id]['time_array'],
                  preparing_habits[message.chat.id]['fine']).save()
    for check_native, check_utc in zip(schedule_native, schedule_utc):  # –Ω—É–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å
        Check(habit.id, check_native, check_utc).save()
    del preparing_habits[message.chat.id]

    bot.send_message(message.chat.id, text, reply_markup=types.ReplyKeyboardRemove())
