from telebot import types
from bot import bot
from users.models import User
from datetime import datetime
from tzwhere import tzwhere
import re
import users.markups as markups
from users.utils import get_schedule
from checks.models import Check
from habits.models import Habit
from users.data import preparing_habits
from users.utils import get_user_naming


@bot.message_handler(func=lambda message:
message.text in ['üéØ –ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞', 'üéØ New habit'], content_types=['text'])
def new_habit(message):
    preparing_habits[message.chat.id] = {'with_judge': False}
    habit_request(message)


@bot.callback_query_handler(func=lambda call: call.data.startswith('@@NEW_HABIT_FROM_SUGGESTION'))
def new_habit_from_suggestion(call):
    preparing_habits[call.message.chat.id] = {'with_judge': False}
    habit_request(call.message)


@bot.message_handler(func=lambda message:
message.text in ['üë®‚Äç‚öñÔ∏è –ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ —Å —Å—É–¥—å—ë–π', 'üë®‚Äç‚öñÔ∏è New habit with judge'], content_types=['text'])
def new_habit_with_judge(message):
    preparing_habits[message.chat.id] = {'with_judge': True}
    habit_request(message)


@bot.callback_query_handler(func=lambda call: call.data.startswith('@@NEW_HABIT_WITH_JUDGE_FROM_SUGGESTION'))
def new_habit_with_judge_from_suggestion(call):
    preparing_habits[call.message.chat.id] = {'with_judge': True}
    habit_request(call.message)


def habit_request(message):
    user = User.get(message.chat.id)
    ru_text = '–ê —Ç—ã –ª—é–±–∏—à—å —Ä–∏—Å–∫–æ–≤–∞—Ç—åüòÅ\n\n–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é.'

    en_text = 'Do you like to risküòÅ\n\nChoose a habit from the list or write your own.'

    text = ru_text if user.language_code == 'ru' else en_text

    bot.send_message(message.chat.id, text, reply_markup=markups.get_habits_markup(message.chat.id))
    bot.register_next_step_handler(message, habit_receive)


def habit_receive(message):
    user = User.get(message.chat.id)

    if message.text in ['–î—Ä—É–≥–æ–µ...', 'Other...']:
        ru_text = '–ù–∞–ø–∏—à–∏ –ø—Ä–∏–≤—ã—á–∫—É, –Ω–∞–¥ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å'
        en_text = 'Write the habit we will work on'
        text = ru_text if user.language_code == 'ru' else en_text

        bot.send_message(message.chat.id,
                         text,
                         reply_markup=types.ReplyKeyboardRemove(),
                         parse_mode='Markdown')
        bot.register_next_step_handler(message, habit_receive)
    else:
        ru_text = f'–ò—Ç–∞–∫, —Ç—ã —Ö–æ—á–µ—à—å *{message.text}*'
        en_text = f'So you want *{message.text}*'
        text = ru_text if user.language_code == 'ru' else en_text

        preparing_habits[message.chat.id]['label'] = message.text
        preparing_habits[message.chat.id]['days_of_week'] = []

        bot.send_message(message.chat.id,
                         text,
                         reply_markup=markups.get_ready_markup(message.chat.id),
                         parse_mode='Markdown')
        days_request(message)


def days_request(message):
    user = User.get(message.chat.id)

    ru_text = '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –∫–æ–≥–¥–∞ —è –±—É–¥—É –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫ —Ç–µ–±–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π.'
    en_text = "Now choose the days of the week when I will come to you with a check"
    text = ru_text if user.language_code == 'ru' else en_text

    bot.send_message(message.chat.id,
                     text,
                     reply_markup=markups.get_days_inline_markup(message.chat.id))
    bot.register_next_step_handler(message, time_request)


@bot.callback_query_handler(func=lambda call: call.data.startswith('@@DAYS_REQUEST_INTRO'))
def handle_days_query(call):
    if call.data == '@@DAYS_REQUEST_INTRO/all':
        preparing_habits[call.message.chat.id]['days_of_week'] = [0, 1, 2, 3, 4, 5, 6]
    else:
        selected_day = int(call.data.split('/')[1])
        if selected_day in preparing_habits[call.message.chat.id]['days_of_week']:
            preparing_habits[call.message.chat.id]['days_of_week'].remove(selected_day)
        else:
            preparing_habits[call.message.chat.id]['days_of_week'].append(selected_day)
            preparing_habits[call.message.chat.id]['days_of_week'].sort()
    bot.edit_message_text(chat_id=call.message.chat.id,
                          text=call.message.text,
                          message_id=call.message.message_id,
                          reply_markup=markups.get_days_inline_markup(call.message.chat.id),
                          parse_mode='HTML')


def time_request(message):
    user = User.get(message.chat.id)

    ru_text = f'–û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, *19:30*. ' \
              f'–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä, *7:30 19:30*'
    en_text = 'Good, choose a check time, for example, *19:30*. ' \
              'You can select multiple checks via space, for example, *7:30 19:30*'
    text = ru_text if user.language_code == 'ru' else en_text

    bot.send_message(message.chat.id,
                     text,
                     parse_mode='Markdown',
                     reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, time_receive)


def time_receive(message):
    user = User.get(message.chat.id)
    ru_days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    en_days = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su']
    days = ru_days if user.language_code == 'ru' else en_days

    time_array = message.text.split(' ')

    try:
        for time in time_array:
            timeformat = '%H:%M'
            datetime.strptime(time, timeformat)

        preparing_habits[message.chat.id]['time_array'] = time_array
        check_days = re.sub(r'\s+', ' ', ' '.join(
            [day if day_of_week in preparing_habits[message.chat.id]['days_of_week'] else '' for day_of_week, day in enumerate(days)]))

        ru_text = f'–•–æ—Ä–æ—à–æ, —è –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–µ–±—è –≤ *{message.text}* –ø–æ *{check_days}*.'
        en_text = f"Okay, I'll check you at *{message.text}* on *{check_days}*"
        text = ru_text if user.language_code == 'ru' else en_text

        bot.send_message(message.chat.id,
                         text,
                         parse_mode="Markdown")
        fine_request(message)

    except ValueError:
        ru_text = '–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤—ë–ª –∫–∞–∫—É—é-—Ç–æ –µ—Ä—É–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º–∞—Ç *–ß–ß:–ú–ú*.'
        en_text = 'It seems you have entered some nonsense. Try again using *HH:MM* format.'
        text = ru_text if user.language_code == 'ru' else en_text

        bot.send_message(message.chat.id, text, parse_mode='Markdown')
        bot.register_next_step_handler(message, time_receive)


def fine_request(message):
    user = User.get(message.chat.id)

    ru_text = '–í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä —à—Ç—Ä–∞—Ñ–∞. –¢–æ–ª—å–∫–æ —Å–º–æ—Ç—Ä–∏ –Ω–µ –ø–µ—Ä–µ–±–æ—Ä—â–∏, ' \
              '–ø–æ—Ç–æ–º—É —á—Ç–æ –ø–ª–∞—Ç–∏—Ç—å –ø—Ä–∏–¥—ë—Ç—Å—è –≤—Å—è–∫–∏–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –Ω–∞—Ä—É—à–∏—à—å –æ–±–µ—â–∞–Ω–∏–µ.'
    en_text = 'Choose a fine. Just do not overdo, ' \
              'because you have to pay every time you break a promise.'
    text = ru_text if user.language_code == 'ru' else en_text

    bot.send_message(message.chat.id, text, reply_markup=markups.get_fines_markup())
    bot.register_next_step_handler(message, fine_receive)


def fine_receive(message):
    try:
        preparing_habits[message.chat.id]['fine'] = int(message.text.split('üí≤')[1])
        promise_request(message)
    except (ValueError, IndexError):
        user = User.get(message.chat.id)
        ru_text = '–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ'
        en_text = 'You sent something wrong'
        text = ru_text if user.language_code == 'ru' else en_text

        bot.send_message(message.chat.id, text)
        bot.register_next_step_handler(message, fine_receive)


def promise_request(message):
    user = User.get(message.chat.id)

    ru_text = f'–í—Ä–µ–º—è –¥–∞—Ç—å –æ–±–µ—â–∞–Ω–∏–µ:\n\n' \
              f'"–Ø –æ–±–µ—â–∞—é *{preparing_habits[message.chat.id]["label"]}* –∏ –∑–∞–ø–ª–∞—á—É —à—Ç—Ä–∞—Ñ' \
              f'*üí≤{preparing_habits[message.chat.id]["fine"]}* –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –æ–±–µ—â–∞–Ω–∏—è."'
    en_text = f"It's time to commit:\n\n" \
              f'"I promise *{preparing_habits[message.chat.id]["label"]}*.' \
              f'I will pay a *{preparing_habits[message.chat.id]["fine"]}* fine for breaking my promise."'
    text = ru_text if user.language_code == 'ru' else en_text

    bot.send_message(message.chat.id, text, reply_markup=markups.get_promise_markup(message.chat.id), parse_mode='Markdown')
    bot.register_next_step_handler(message, promise_receive)


def promise_receive(message):
    user = User.get(message.chat.id)

    habit = Habit(message.chat.id,
                  preparing_habits[message.chat.id]['label'],
                  preparing_habits[message.chat.id]['days_of_week'],
                  preparing_habits[message.chat.id]['time_array'],
                  preparing_habits[message.chat.id]['fine']).save()

    if preparing_habits[message.chat.id]['with_judge']:
        ru_text = '–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å—É–¥—å—é. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –¥—Ä—É–≥—É —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µüëá'
        en_text = 'It remains to assign the judge. Just send the message below to a friendüëá'
        text = ru_text if user.language_code == 'ru' else en_text

        bot.send_message(message.chat.id, text, reply_markup=types.ReplyKeyboardRemove())

        ru_days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        en_days = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su']
        days = ru_days if user.language_code == 'ru' else en_days

        check_days = re.sub(r'\s+', ' ', ' '.join(
            [day if day_of_week in preparing_habits[message.chat.id]['days_of_week'] else '' for day_of_week, day in
             enumerate(days)]))
        check_time = ' '.join(preparing_habits[message.chat.id]['time_array'])

        ru_text = f'{get_user_naming(user, "–¢–≤–æ–π –¥—Ä—É–≥")} —Ö–æ—á–µ—Ç, ' \
                  f'—á—Ç–æ–±—ã —Ç—ã —Å—Ç–∞–ª –µ–≥–æ —Å—É–¥—å—ë–π –Ω–∞ –ø—Ä–∏–≤—ã—á–∫–µ *{habit.label}*.\n\n' \
                  f'–î–Ω–∏ –Ω–µ–¥–µ–ª–∏: *{check_days}*\n' \
                  f'–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: *{check_time}*\n' \
                  f'–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: *3 –Ω–µ–¥–µ–ª–∏*\n\n' \
                  f'–ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–æ–≤–∞–ª {get_user_naming(user, "—Ç–≤–æ–π –¥—Ä—É–≥")} –æ–±—è–∑—É–µ—Ç—Å—è –∑–∞–ø–ª–∞—Ç–∏—Ç—å —Ç–µ–±–µ *${habit.fine}*'
        en_text = f'{get_user_naming(user, "Your friend")} wants you' \
                  f'to be the jadge on the habit *{habit.label}*.\n\n' \
                  f'Days of week: *{check_days}*\n' \
                  f'Checks time: *{check_time}*\n' \
                  f'Duration: *3 weeks*\n\n' \
                  f'For each fail {get_user_naming(user, "your friend")} agrees to pay you *${habit.fine}*'
        text = ru_text if user.language_code == 'ru' else en_text

        bot.send_message(message.chat.id, text, reply_markup=markups.get_judge_markup(user.id, habit.id), parse_mode='Markdown')
    else:
        ru_text = '–ù—É —á—Ç–æ –∂, –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫–æ–π —Ç—ã –∫—Ä—É—Ç–æ–π. –£–¥–∞—á–∏!'
        en_text = "Well, let's see how cool you are. Good luck!"
        text = ru_text if user.language_code == 'ru' else en_text

        schedule_native, schedule_utc = get_schedule(
            preparing_habits[message.chat.id]['days_of_week'],
            preparing_habits[message.chat.id]['time_array'],
            User.get(message.chat.id).timezone,
        )

        for check_native, check_utc in zip(schedule_native, schedule_utc):  # –Ω—É–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å
            Check(habit.id, check_native, check_utc).save()

        bot.send_message(message.chat.id, text, reply_markup=markups.get_main_menu_markup(message.chat.id))
        bot.send_sticker(message.chat.id, 'CAADAgADWQIAAsY4fgsQX6OJTX_IOgI')

    del preparing_habits[message.chat.id]
